{"version":3,"sources":["images/spider.svg","images/fly.png","App.js","serviceWorker.js","startGame.js","index.js"],"names":["module","exports","App","className","class","src","flyImg","alt","spiderImg","Boolean","window","location","hostname","match","startGame","interval","spider","link","document","querySelector","position","x","y","direction","toTop","transferToDOM","listenDirections","toBottom","toRight","toLeft","fly","style","top","left","transform","gameCore","setInterval","xs","sort","a","b","ys","score","innerText","randomInteger","min","max","rand","Math","random","round","transition","addEventListener","event","code","clearInterval","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,+LC4B5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,sCAAW,0BAAMC,MAAM,SAAZ,MACX,yBAAKA,MAAM,QACT,yBACEC,IAAKC,IACLF,MAAM,MACNG,IAAI,QAEN,yBACEF,IAAKG,IACLJ,MAAM,SACNG,IAAI,YAGR,mDCXcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCuGSC,MAzHf,WACE,IA+DIC,EA/DEC,EAAS,CACbC,KAAMC,SAASC,cAAc,WAC7BC,SAAU,CACRC,EAAG,GACHC,EAAG,IAELC,UAAW,EACXC,MAPa,WAQPR,EAAOI,SAASE,EAAI,IACtBN,EAAOI,SAASE,IAChBN,EAAOO,UAAY,EACnBE,IACAC,MAGJC,SAfa,WAgBPX,EAAOI,SAASE,EAAI,KACtBN,EAAOI,SAASE,IAChBN,EAAOO,UAAY,IACnBE,IACAC,MAGJE,QAvBa,WAwBPZ,EAAOI,SAASC,EAAI,KACtBL,EAAOI,SAASC,IAChBL,EAAOO,UAAY,GACnBE,IACAC,MAGJG,OA/Ba,WAgCPb,EAAOI,SAASC,EAAI,IACtBL,EAAOI,SAASC,IAChBL,EAAOO,UAAY,IACnBE,IACAC,OAKAI,EAAM,CACVb,KAAMC,SAASC,cAAc,QAC7BC,SAAU,CACRC,EAAG,GACHC,EAAG,IAQP,SAASG,IACPT,EAAOC,KAAKc,MAAMC,IAAMhB,EAAOI,SAASE,EAAI,IAC5CN,EAAOC,KAAKc,MAAME,KAAOjB,EAAOI,SAASC,EAAI,IAC7CS,EAAIb,KAAKc,MAAMC,IAAMF,EAAIV,SAASE,EAAI,IACtCQ,EAAIb,KAAKc,MAAME,KAAOH,EAAIV,SAASC,EAAI,IAEvCL,EAAOC,KAAKc,MAAMG,UAAlB,uCAA8DlB,EAAOO,UAArE,QAMF,SAASY,EAASZ,GAChBR,EAAWqB,YAAYb,EAAW,IAyBpC,SAASG,IACP,IAAMW,EAAK,CAACP,EAAIV,SAASC,EAAGL,EAAOI,SAASC,GAAGiB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KAC5DE,EAAK,CAACX,EAAIV,SAASE,EAAGN,EAAOI,SAASE,GAAGgB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KAE9DF,EAAG,GAAKA,EAAG,GAAK,GAAKI,EAAG,GAAKA,EAAG,GAAK,IAezCC,EAAMC,YAINb,EAAIV,SAASE,EAAIsB,EAAc,EAAG,IAClCd,EAAIV,SAASC,EAAIuB,EAAc,EAAG,KAdpC,SAASA,EAAcC,EAAKC,GAC1B,IAAMC,EAAOF,EAAM,GAAMG,KAAKC,UAAYH,EAAMD,EAAM,GAEtD,OAAOG,KAAKE,MAAMH,GAvDpB/B,EAAOC,KAAKc,MAAMG,UAAlB,wBACAJ,EAAIb,KAAKc,MAAMG,UAAf,wBACAlB,EAAOC,KAAKc,MAAMoB,WAAa,OAU/B1B,IAQAP,SAASkC,iBAAiB,WAAW,SAASC,GACzB,YAAfA,EAAMC,OACRC,cAAcxC,GACdoB,EAASnB,EAAOQ,QAGC,cAAf6B,EAAMC,OACRC,cAAcxC,GACdoB,EAASnB,EAAOW,WAGC,eAAf0B,EAAMC,OACRC,cAAcxC,GACdoB,EAASnB,EAAOY,UAGC,cAAfyB,EAAMC,OACRC,cAAcxC,GACdoB,EAASnB,EAAOa,YAoBpB,IAAMa,EAAQxB,SAASC,cAAc,WCpGvCqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASyC,eAAe,SAG1B7C,IFoHM,kBAAmB8C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7984fc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spider.b9d55c58.svg\";","module.exports = __webpack_public_path__ + \"static/media/fly.8fcaccea.png\";","import React from 'react';\n\nimport spiderImg from './images/spider.svg';\nimport flyImg from './images/fly.png';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Score: <span class=\"score\">0</span></h1>\n      <div class=\"wall\">\n        <img\n          src={flyImg}\n          class=\"fly\"\n          alt=\"fly\"\n        />\n        <img\n          src={spiderImg}\n          class=\"spider\"\n          alt=\"spider\"\n        />\n      </div>\n      <p>Use arrows to play</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function startGame() {\n  const spider = {\n    link: document.querySelector('.spider'),\n    position: {\n      x: 50,\n      y: 50,\n    },\n    direction: 0,\n    toTop() {\n      if (spider.position.y > 5) {\n        spider.position.y--;\n        spider.direction = 0;\n        transferToDOM();\n        listenDirections();\n      }\n    },\n    toBottom() {\n      if (spider.position.y < 95) {\n        spider.position.y++;\n        spider.direction = 180;\n        transferToDOM();\n        listenDirections();\n      }\n    },\n    toRight() {\n      if (spider.position.x < 95) {\n        spider.position.x++;\n        spider.direction = 90;\n        transferToDOM();\n        listenDirections();\n      }\n    },\n    toLeft() {\n      if (spider.position.x > 5) {\n        spider.position.x--;\n        spider.direction = 270;\n        transferToDOM();\n        listenDirections();\n      }\n    },\n  };\n  \n  const fly = {\n    link: document.querySelector('.fly'),\n    position: {\n      x: 30,\n      y: 5,\n    },\n  };\n  \n  spider.link.style.transform = `translate(-50%, -50%)`;\n  fly.link.style.transform = `translate(-50%, -50%)`;\n  spider.link.style.transition = '0.2s';\n  \n  function transferToDOM() {\n    spider.link.style.top = spider.position.y + '%';\n    spider.link.style.left = spider.position.x + '%';\n    fly.link.style.top = fly.position.y + '%';\n    fly.link.style.left = fly.position.x + '%';\n    // eslint-disable-next-line max-len\n    spider.link.style.transform = `translate(-50%, -50%) rotate(${spider.direction}deg)`;\n  }\n  transferToDOM();\n  \n  let interval;\n  \n  function gameCore(direction) {\n    interval = setInterval(direction, 50);\n  }\n  \n  document.addEventListener('keydown', function(event) {\n    if (event.code === 'ArrowUp') {\n      clearInterval(interval);\n      gameCore(spider.toTop);\n    }\n  \n    if (event.code === 'ArrowDown') {\n      clearInterval(interval);\n      gameCore(spider.toBottom);\n    }\n  \n    if (event.code === 'ArrowRight') {\n      clearInterval(interval);\n      gameCore(spider.toRight);\n    }\n  \n    if (event.code === 'ArrowLeft') {\n      clearInterval(interval);\n      gameCore(spider.toLeft);\n    }\n  });\n  \n  function listenDirections() {\n    const xs = [fly.position.x, spider.position.x].sort((a, b) => b - a);\n    const ys = [fly.position.y, spider.position.y].sort((a, b) => b - a);\n  \n    if (xs[0] - xs[1] < 6 && ys[0] - ys[1] < 6) {\n      scoreCount();\n      makeFly();\n    }\n  }\n  \n  function randomInteger(min, max) {\n    const rand = min - 0.5 + Math.random() * (max - min + 1);\n  \n    return Math.round(rand);\n  }\n  \n  const score = document.querySelector('.score');\n  \n  function scoreCount() {\n    score.innerText++;\n  }\n  \n  function makeFly() {\n    fly.position.y = randomInteger(5, 95);\n    fly.position.x = randomInteger(5, 95);\n  }\n  \n}\n\nexport default startGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport startGame from './startGame';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nstartGame();\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}